package br.ufu.facom.lascam.coverageexploiter.analytics;

import java.io.FileOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Iterator;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CreationHelper;

import br.ufu.facom.lascam.coverageexploiter.analytics.model.ElementMetric;
import br.ufu.facom.lascam.coverageexploiter.analytics.model.ElementsMetric;

/**
 * CoverageResults.java is responsible for creating an Excel spreadsheet, called
 * "Coverage-results.xls", containing information (amount and date) of API
 * elements citation found in snippets of the StackOverflow.
 * 
 * Created by Fer Madeiral on 24/10/2014.
 */
public class CoverageResults {

	private static CoverageResults INSTANCE;

	private String fileName;
	private HSSFWorkbook workbook;
	private HSSFSheet allElementsSheet, packagesSheet, boundClassesSheet, allClassesSheet, boundMethodsSheet, allMethodsSheet;

	private HSSFFont normalFont, boldFont;
	private HSSFCellStyle centerAlignmentCellStyle, leftAlignmentCellStyle,	rightAlignmentCellStyle;
	private HSSFCellStyle dataFormatCellStyle;

	public static synchronized CoverageResults getInstance() {
		if (INSTANCE == null) {
			INSTANCE = new CoverageResults();
		}
		return INSTANCE;
	}

	private CoverageResults() {
		fileName = "Coverage-results.xls";
		workbook = new HSSFWorkbook();

		allElementsSheet = workbook.createSheet("All Elements");
		packagesSheet = workbook.createSheet("Packages");
		boundClassesSheet = workbook.createSheet("Bound Classes");
		allClassesSheet = workbook.createSheet("All Classes");
		boundMethodsSheet = workbook.createSheet("Bound Methods");
		allMethodsSheet = workbook.createSheet("All Methods");

		normalFont = workbook.createFont();
		normalFont.setFontName(HSSFFont.FONT_ARIAL);
		normalFont.setFontHeightInPoints((short) 10);

		boldFont = workbook.createFont();
		boldFont.setFontName(HSSFFont.FONT_ARIAL);
		boldFont.setFontHeightInPoints((short) 10);
		boldFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

		centerAlignmentCellStyle = workbook.createCellStyle();
		centerAlignmentCellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);

		leftAlignmentCellStyle = workbook.createCellStyle();
		leftAlignmentCellStyle.setAlignment(HSSFCellStyle.ALIGN_LEFT);

		rightAlignmentCellStyle = workbook.createCellStyle();
		rightAlignmentCellStyle.setAlignment(HSSFCellStyle.ALIGN_RIGHT);

		dataFormatCellStyle = workbook.createCellStyle();
		CreationHelper createHelper = workbook.getCreationHelper();
		dataFormatCellStyle.setDataFormat(createHelper.createDataFormat().getFormat("dd/MM/yyyy"));
	}

	public void writeDataSheet(ElementsMetric<?> elementsMetric, int packagesOfTheAPI, int classesOfTheAPI, int methodsOfTheAPI) {
		createHeader(allElementsSheet);
		createHeader(packagesSheet);
		createHeader(boundClassesSheet);
		createHeader(allClassesSheet);
		createHeader(boundMethodsSheet);
		createHeader(allMethodsSheet);

		int rowAllElementsSheet = 1, rowPackagesSheet = 1, rowBoundClassesSheet = 1, rowAllClassesSheet = 1, rowBoundMethodsSheet = 1, rowAllMethodsSheet = 1;
		Iterator<ElementMetric> ite = elementsMetric.iterator();
		ElementMetric elementMetric;
		while (ite.hasNext()) {
			elementMetric = ite.next();

			writeDataRow(allElementsSheet, rowAllElementsSheet++, elementMetric);

			if (elementMetric.getType().equals("package")) {
				writeDataRow(packagesSheet, rowPackagesSheet++, elementMetric);
			} else {
				if (elementMetric.getType().equals("class")) {
					writeDataRow(allClassesSheet, rowAllClassesSheet++, elementMetric);
					if (elementMetric.getMatches().size() == 1) {
						writeDataRow(boundClassesSheet, rowBoundClassesSheet++, elementMetric);
					}
				} else {
					writeDataRow(allMethodsSheet, rowAllMethodsSheet++, elementMetric);
					if (elementMetric.getMatches().size() == 1) {
						writeDataRow(boundMethodsSheet, rowBoundMethodsSheet++,	elementMetric);
					}
				}
			}
		}

		// API elements and coverage totals
		writeTotals(allElementsSheet, "#API Elements:", (packagesOfTheAPI + classesOfTheAPI + methodsOfTheAPI), "#Covered:", "D" + rowAllElementsSheet);
		writeTotals(packagesSheet, "#API Packages:", packagesOfTheAPI, "#Covered:", "D" + rowPackagesSheet);
		writeTotals(boundClassesSheet, "#API Classes:", classesOfTheAPI, "#Covered:", "D" + rowBoundClassesSheet);
		writeTotals(allClassesSheet, "#API Classes:", classesOfTheAPI, "#Covered:", "D" + rowAllClassesSheet);
		writeTotals(boundMethodsSheet, "#API Methods:", methodsOfTheAPI, "#Covered:", "D" + rowBoundMethodsSheet);
		writeTotals(allMethodsSheet, "#API Methods:", methodsOfTheAPI, "#Covered:", "D" + rowAllMethodsSheet);

		autoSizeColumns(allElementsSheet);
		autoSizeColumns(packagesSheet);
		autoSizeColumns(boundClassesSheet);
		autoSizeColumns(allClassesSheet);
		autoSizeColumns(boundMethodsSheet);
		autoSizeColumns(allMethodsSheet);

		FileOutputStream fileOut;
		try {
			fileOut = new FileOutputStream(fileName);
			workbook.write(fileOut);
			fileOut.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createHeader(HSSFSheet sheet) {
		centerAlignmentCellStyle.setFont(boldFont);

		HSSFRow row;

		row = sheet.createRow(0);

		writeColumnLabel(row, 0, "API Element");
		writeColumnLabel(row, 1, "#Citation");
		writeColumnLabel(row, 2, "Date");
	}

	private void writeColumnLabel(HSSFRow row, int column, String label) {
		HSSFCell cell;

		cell = row.createCell(column);
		cell.setCellValue(label);
		cell.setCellStyle(centerAlignmentCellStyle);
	}

	private void writeDataRow(HSSFSheet sheet, int rowIndex, ElementMetric elementMetric) {
		HSSFRow row;
		HSSFCell cell;

		row = sheet.createRow(rowIndex);

		cell = row.createCell(0);
		cell.setCellValue(elementMetric.getElement());

		cell = row.createCell(1);
		cell.setCellValue((double) elementMetric.getHitCounter());
		cell.setCellType(Cell.CELL_TYPE_NUMERIC);

		String[] separatedDate = elementMetric.getElementPostDate().toString().split("-");
		String dateInString = separatedDate[2] + "/" + separatedDate[1] + "/" + separatedDate[0];
		try {
			cell = row.createCell(2);
			cell.setCellValue(new SimpleDateFormat("dd/MM/yyyy").parse(dateInString));
			cell.setCellStyle(dataFormatCellStyle);
		} catch (ParseException e) {
			e.printStackTrace();
		}

		cell = row.createCell(3);
		String formula = "IF(C" + (rowIndex + 1) + "<>C" + rowIndex + ",COUNTIF(C:C,C" + (rowIndex + 1) + ")+D" + rowIndex + ",D" + rowIndex + ")";
		cell.setCellFormula(formula);
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
	}

	private void writeTotals(HSSFSheet sheet, String apiTotalLabel, int apiTotal, String coverageTotalLabel, String coverageTotal) {
		leftAlignmentCellStyle.setFont(boldFont);
		rightAlignmentCellStyle.setFont(boldFont);

		HSSFRow row;
		HSSFCell cell;

		row = sheet.getRow(0);

		cell = row.createCell(6);
		cell.setCellValue(apiTotalLabel);
		cell.setCellStyle(leftAlignmentCellStyle);

		cell = row.createCell(7);
		cell.setCellValue(apiTotal);
		cell.setCellType(Cell.CELL_TYPE_NUMERIC);
		cell.setCellStyle(rightAlignmentCellStyle);

		cell = row.createCell(9);
		cell.setCellValue(coverageTotalLabel);
		cell.setCellStyle(leftAlignmentCellStyle);

		cell = row.createCell(10);
		cell.setCellFormula(coverageTotal);
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
		cell.setCellStyle(rightAlignmentCellStyle);
	}

	private void autoSizeColumns(HSSFSheet sheet) {
		sheet.autoSizeColumn(0);
		sheet.autoSizeColumn(1);
		sheet.autoSizeColumn(2);
		sheet.autoSizeColumn(3);
		sheet.autoSizeColumn(6);
		sheet.autoSizeColumn(7);
		sheet.autoSizeColumn(9);
		sheet.autoSizeColumn(10);
	}
}