package br.ufu.facom.lascam.coverageexploiter.analytics;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import br.ufu.facom.lascam.coverageexploiter.analytics.model.ElementMetric;
import br.ufu.facom.lascam.coverageexploiter.analytics.model.ElementsMetric;

/**
 * HeatMap.java is responsible for creating heat map visual representation using
 * API elements citation information. To do this, a HTML file (with the necessary
 * information) is created to be loaded in a browser in order to obtained the
 * heat map using Google Charts (see
 * https://google-developers.appspot.com/chart/interactive/docs/gallery/treemap).
 * <p>
 * Created by Fer Madeiral on 24/11/2014.
 */
public class HeatMap {

	public static void create(ElementsMetric elementsMetric, Map<String, Set<String>> targetApiPackagesToClasses,
			Map<String, Set<String>> targetApiClassesToMethods) {
		String content = "";

		content += "<html>";
		content += "\n\t<head>";
		content += "\n\t\t<script type=\"text/javascript\" src=\"https://www.google.com/jsapi\"></script>";
		content += "\n\t\t<script type=\"text/javascript\">";
		content += "\n\t\t\tgoogle.load(\"visualization\", \"1\", {packages:[\"treemap\"]});";
		// Set callback to run when API is loaded
		content += "\n\t\t\tgoogle.setOnLoadCallback(drawVisualization);";
		// Called when the Visualization API is loaded
		content += "\n\t\t\tfunction drawVisualization() {";
		// Create and populate a data table
		content += "\n\t\t\t\tvar data = new google.visualization.DataTable();";
		content += "\n\t\t\t\tdata.addColumn('string', 'Element');";
		content += "\n\t\t\t\tdata.addColumn('string', 'Owner');";
		content += "\n\t\t\t\tdata.addColumn('number', '#Methods');";
		content += "\n\t\t\t\tdata.addColumn('number', '#Citations');";
		content += "\n\t\t\t\tdata.addRows([";
		content += "\n\t\t\t\t\t['API', null, 0, 0],";

		String packName, className;
		for (Map.Entry<String, Set<String>> entry : targetApiPackagesToClasses.entrySet()) {
			packName = entry.getKey();
			content += "\n\t\t\t\t\t['" + packName + "', 'API', 0, 0],";

			for (String clazz : entry.getValue()) {
				className = clazz.replace(packName + ".", "");

				ElementMetric elementMetric = findClassInElementsMetric(clazz, elementsMetric);
				if (elementMetric != null) {
					content += "\n\t\t\t\t\t[{v:'" + clazz + "', f:'" + className + "'}, '" + packName + "', " + targetApiClassesToMethods.get(clazz).size() + ", " + elementMetric.getHitCounter() + "],";
				} else {
					content += "\n\t\t\t\t\t[{v:'" + clazz + "', f:'" + className + "'}, '" + packName + "', " + targetApiClassesToMethods.get(clazz).size() + ", {v:null, f:'0'}],";
				}
			}
		}

		content = content.substring(0, content.length() - 1);

		content += "\n\t\t\t\t]);";
		content += "\n";

		// Instantiate the Treemap
		content += "\n\t\t\t\ttree = new google.visualization.TreeMap(document.getElementById('visualization'));";
		content += "\n";

		// Set options
		content += "\n\t\t\t\tvar options = {";
		content += "\n\t\t\t\t\tfontColor: 'black',";
		content += "\n\t\t\t\t\tshowScale: true,";
		content += "\n\t\t\t\t\tminColor: '#FF0000',";
		content += "\n\t\t\t\t\tmidColor: '#FFFF00',";
		content += "\n\t\t\t\t\tmaxColor: '#0000FF',";
		content += "\n\t\t\t\t\tnoColor: 'EAEAEA',";
		content += "\n\t\t\t\t\theaderHeight: 15,";
		content += "\n\t\t\t\t\tmaxDepth: 2,";
		content += "\n\t\t\t\t\tgenerateTooltip: showFullTooltip";
		content += "\n\t\t\t\t};";
		content += "\n";

		// Draw the treemap with the created data and options
		content += "\n\t\t\t\ttree.draw(data, options);";
		content += "\n";

		content += "\n\t\t\t\tfunction showFullTooltip(row, size, value) {";
		content += "\n\t\t\t\t\treturn '<div style=\"background:#fd9; padding:10px; border-style:solid; -webkit-border-radius:10px 10px 10px 10px\">' +";
		content += "\n\t\t\t\t\t\t'<span style=\"font-family:Courier\">' +";
		content += "\n\t\t\t\t\t\t'<b>' + data.getFormattedValue(row, 0) + '</b>, ' + data.getValue(row, 1) +";
		content += "\n\t\t\t\t\t\t'</span><br>' +";
		content += "\n\t\t\t\t\t\tdata.getColumnLabel(2) + ': ' + data.getValue(row, 2) + '<br>' +";
		content += "\n\t\t\t\t\t\tdata.getColumnLabel(3) + ': ' + data.getFormattedValue(row, 3) + '</div>';";
		content += "\n\t\t\t\t}";
		content += "\n";

		content += "\n\t\t\t}";
		content += "\n\t\t</script>";
		content += "\n\t</head>";
		content += "\n\t<body>";
		content += "\n\t\t<div id=\"visualization\" style=\"width: 1300px; height: 650px;\"></div>";
		content += "\n\t</body>";
		content += "\n</html>";

		File file = new File("HeatMap.html");
		try {
			if (!file.exists()) {
				file.createNewFile();
			}

			FileWriter fw = new FileWriter(file.getAbsoluteFile());

			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(content);
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static ElementMetric findClassInElementsMetric(String clazz, ElementsMetric elementsMetric) {
		Iterator ite = elementsMetric.iterator();
		for (ElementMetric elementMetric = (ElementMetric) ite.next(); ite.hasNext(); elementMetric = (ElementMetric) ite.next()) {
			if (elementMetric.getElement().equals(clazz)) {
				return elementMetric;
			}
		}
		return null;
	}
}
