package br.ufu.facom.lascam.coverageexploiter.analytics;

import br.ufu.facom.lascam.coverageexploiter.analytics.model.ElementMetric;
import br.ufu.facom.lascam.coverageexploiter.analytics.model.ElementsMetric;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CreationHelper;

import java.io.FileOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Iterator;

/**
 * Created by Fer Madeiral on 24/10/2014.
 */
public class Output {
	
	private static Output INSTANCE;
	
	private String fileName;
	private HSSFWorkbook workbook;
	private HSSFSheet sheet;
	
	private Output() {
		fileName = "Coverage.xls";
		workbook = new HSSFWorkbook();
		sheet = workbook.createSheet("Collected Data");
	}
	
	public static synchronized Output getInstance() {
		if (INSTANCE == null) {
			INSTANCE = new Output();
		}
		return INSTANCE;
	}

	public void writeDataSheet(ElementsMetric<?> elementsMetric) {
		HSSFCellStyle cellStyle = workbook.createCellStyle();
        cellStyle = workbook.createCellStyle();
        HSSFFont hSSFFont = workbook.createFont();
        hSSFFont.setFontName(HSSFFont.FONT_ARIAL);
        hSSFFont.setFontHeightInPoints((short) 10);
        hSSFFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
        cellStyle.setFont(hSSFFont);
        cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		
		HSSFRow row;
		HSSFCell cell;
		
		row = sheet.createRow(0);
		
		cell = row.createCell(0);
		cell.setCellValue("API Element");
		cell.setCellStyle(cellStyle);
		
		cell = row.createCell(1);
		cell.setCellValue("#Citation");
		cell.setCellStyle(cellStyle);

		cell = row.createCell(2);
		cell.setCellValue("Date");
		cell.setCellStyle(cellStyle);
		
		int line = 1;
		Iterator<ElementMetric> ite = elementsMetric.iterator();
		while (ite.hasNext()) {
			ElementMetric elementMetric = ite.next();
			
			row = sheet.createRow(line);
			
			cell = row.createCell(0);
			cell.setCellValue(elementMetric.getElement());
			
			cell = row.createCell(1, HSSFCellStyle.ALIGN_CENTER);
			cell.setCellValue((double) elementMetric.getHitCounter());
			cell.setCellType(Cell.CELL_TYPE_NUMERIC);
			
			String[] separatedDate = elementMetric.getElementPostDate().toString().split("-");
			String dateInString = separatedDate[2] + "/" + separatedDate[1] + "/" + separatedDate[0];
			try {
				cell = row.createCell(2);
				cell.setCellValue(new SimpleDateFormat("dd/MM/yyyy").parse(dateInString));
				HSSFCellStyle cellStyle2 = workbook.createCellStyle();
				CreationHelper createHelper = workbook.getCreationHelper();
				cellStyle2.setDataFormat(createHelper.createDataFormat().getFormat("dd/MM/yyyy"));
				cell.setCellStyle(cellStyle2);
			} catch (ParseException e) {
				e.printStackTrace();
			}
			
			cell = row.createCell(3);
			String formula = "IF(C" + (line + 1) + "<>C" + line + ",COUNTIF(C:C,C" + (line + 1) + ")+D" + line + ",D" + line + ")";
			cell.setCellFormula(formula);
			cell.setCellType(Cell.CELL_TYPE_FORMULA);
			
		    line++;
		}
		
		sheet.autoSizeColumn(0);
		sheet.autoSizeColumn(1);
		sheet.autoSizeColumn(2);
		sheet.autoSizeColumn(3);
		
		FileOutputStream fileOut;
		try {
			fileOut = new FileOutputStream(fileName);
			workbook.write(fileOut);
			fileOut.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}