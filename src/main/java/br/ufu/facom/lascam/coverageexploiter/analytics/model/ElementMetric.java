package br.ufu.facom.lascam.coverageexploiter.analytics.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;

/**
 * Created by Klerisson on 23/10/2014.
 */
public class ElementMetric implements Comparable<ElementMetric>{

    private String element;
    private String type;
    Set<String> matches;
    private List<ElementMetric> childElements;
    private int hitCounter;
    private Date elementPostDate;

    public ElementMetric(String element, String type, Set<String> matches, Date elementPostDate) {
        this.element = element;
        this.type = type;
        this.matches = matches;
        this.childElements = new ArrayList<>();
        hitCounter = 0;
        this.elementPostDate = elementPostDate;
    }

    public String getElement() {
        return element;
    }
    
    public String getType() {
    	return type;
    }
    
    public Set<String> getMatches() {
    	return matches;
    }

    public List<ElementMetric> getChildElements() {
        return childElements;
    }

    public void setChildElements(List<ElementMetric> childElements) {
        this.childElements = childElements;
    }

    public int getHitCounter() {
        return hitCounter;
    }

    public void setHitCounter(int hitCounter) {
        this.hitCounter = hitCounter;
    }
    
    public void increaseHitCounter() {
        this.hitCounter++;
    }

    public Date getElementPostDate() {
        return elementPostDate;
    }

    public void setElementPostDate(Date elementPostDate) {
        this.elementPostDate = elementPostDate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ElementMetric)) return false;

        ElementMetric that = (ElementMetric) o;

        if (!element.equals(that.element)) return false;

        return true;
    }

    @Override
    public int hashCode() {
        return element.hashCode();
    }

   /**
     * Compares this object with the specified object for order.  Returns a
     * negative integer, zero, or a positive integer as this object is less
     * than, equal to, or greater than the specified object.
     * <p/>
     * <p>The implementor must ensure <tt>sgn(x.compareTo(y)) ==
     * -sgn(y.compareTo(x))</tt> for all <tt>x</tt> and <tt>y</tt>.  (This
     * implies that <tt>x.compareTo(y)</tt> must throw an exception iff
     * <tt>y.compareTo(x)</tt> throws an exception.)
     * <p/>
     * <p>The implementor must also ensure that the relation is transitive:
     * <tt>(x.compareTo(y)&gt;0 &amp;&amp; y.compareTo(z)&gt;0)</tt> implies
     * <tt>x.compareTo(z)&gt;0</tt>.
     * <p/>
     * <p>Finally, the implementor must ensure that <tt>x.compareTo(y)==0</tt>
     * implies that <tt>sgn(x.compareTo(z)) == sgn(y.compareTo(z))</tt>, for
     * all <tt>z</tt>.
     * <p/>
     * <p>It is strongly recommended, but <i>not</i> strictly required that
     * <tt>(x.compareTo(y)==0) == (x.equals(y))</tt>.  Generally speaking, any
     * class that implements the <tt>Comparable</tt> interface and violates
     * this condition should clearly indicate this fact.  The recommended
     * language is "Note: this class has a natural ordering that is
     * inconsistent with equals."
     * <p/>
     * <p>In the foregoing description, the notation
     * <tt>sgn(</tt><i>expression</i><tt>)</tt> designates the mathematical
     * <i>signum</i> function, which is defined to return one of <tt>-1</tt>,
     * <tt>0</tt>, or <tt>1</tt> according to whether the value of
     * <i>expression</i> is negative, zero or positive.
     *
     * @param o the object to be compared.
     * @return a negative integer, zero, or a positive integer as this object
     * is less than, equal to, or greater than the specified object.
     * @throws NullPointerException if the specified object is null
     * @throws ClassCastException   if the specified object's type prevents it
     *                              from being compared to this object.
     */
    @Override
    public int compareTo(ElementMetric o) {
        return this.getElement().compareTo(o.getElement());
    }
}
