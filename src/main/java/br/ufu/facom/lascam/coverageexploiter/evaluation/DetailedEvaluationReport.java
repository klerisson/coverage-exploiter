package br.ufu.facom.lascam.coverageexploiter.evaluation;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Set;

import org.apache.poi.xwpf.usermodel.BreakType;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;

/**
 * DetailedEvaluationReport.java is responsible for creating a word document,
 * called "Detailed-evaluation-report.docx", containing a detailed report of
 * executed test cases. For each test case, is presented its snippet and the
 * expected and output element sets.
 * <p>
 * Created by Fer Madeiral on 22/11/2014.
 */
public class DetailedEvaluationReport {

	private static DetailedEvaluationReport INSTANCE;

	private String fileName;
	private XWPFDocument document;

	public static synchronized DetailedEvaluationReport getInstance() {
		if (INSTANCE == null) {
			INSTANCE = new DetailedEvaluationReport();
		}
		return INSTANCE;
	}

	public DetailedEvaluationReport() {
		fileName = "Detailed-evaluation-report.docx";
		document = new XWPFDocument();
	}

	public void writeDocument(List<TestCase> testSuite) {
		XWPFParagraph tmpParagraph;
		XWPFRun tmpRun;
		TestCase testCase;
		for (int i = 0; i < testSuite.size(); i++) {
			testCase = testSuite.get(i);

			tmpParagraph = document.createParagraph();
			tmpRun = tmpParagraph.createRun();
			tmpRun.setBold(true);
			tmpRun.setColor("FF0000");
			tmpRun.setText("Snippet " + (i + 1));

			tmpParagraph = document.createParagraph();
			tmpRun = tmpParagraph.createRun();
			tmpRun.setText("<snippet>");

			for (XWPFParagraph paragraph : testCase.getCodeParagraphs()) {
				document.createParagraph();
				int pos = document.getParagraphs().size() - 1;
				paragraph.setSpacingAfter(0);
				document.setParagraph(paragraph, pos);
			}

			tmpParagraph = document.createParagraph();
			tmpRun = tmpParagraph.createRun();
			tmpRun.setText("</snippet>");

			createParagraphForElementsSet("[Parser] Relevant Elements Set:", testCase.getParserRelevantElementsSet());
			createParagraphForElementsSet("[Parser] Returned Elements Set:", testCase.getParserReturnedElementsSet());
			createParagraphForElementsSet("[Parser] True Positive Elements Set:", testCase.getParserResultingElements().getTruePositives());
			createParagraphForElementsSet("[Parser] False Positive Elements Set:", testCase.getParserResultingElements().getFalsePositives());
			createParagraphForElementsSet("[Parser] False Negative Elements Set:", testCase.getParserResultingElements().getFalseNegatives());

			createParagraphForElementsSet("[Parser to Binder] Relevant Elements Set:", testCase.getBinderRelevantElementsSet());
			createParagraphForElementsSet("[Parser to Binder] Submitted Elements Set:", testCase.getBinderSubmittedElementsSet());
			createParagraphForElementsSet("[Parser to Binder] True Positive Elements Set:", testCase.getParserToBinderResultingElements().getTruePositives());
			createParagraphForElementsSet("[Parser to Binder] False Positive Elements Set:", testCase.getParserToBinderResultingElements().getFalsePositives());
			createParagraphForElementsSet("[Parser to Binder] False Negative Elements Set:", testCase.getParserToBinderResultingElements().getFalseNegatives());

			createParagraphForElementsSet("[Binder] Bindable Elements Set:", testCase.getBindableElementsSet());
			createParagraphForElementsSet("[Binder] Returned Elements Set:", testCase.getBinderReturnedElementsSet());
			createParagraphForElementsSet("[Binder] True Positive Elements Set:", testCase.getBinderResultingElements().getTruePositives());
			createParagraphForElementsSet("[Binder] False Positive Elements Set:", testCase.getBinderResultingElements().getFalsePositives());
			createParagraphForElementsSet("[Binder] False Negative Elements Set:", testCase.getBinderResultingElements().getFalseNegatives());

			if ((i + 1) < testSuite.size()) {
				tmpParagraph = document.createParagraph();
				tmpRun = tmpParagraph.createRun();
				tmpRun.addBreak(BreakType.PAGE);
			}
		}

		FileOutputStream fos;
		try {
			fos = new FileOutputStream(new File(fileName));
			document.write(fos);
			fos.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createParagraphForElementsSet(String setDescription, Set<String> set) {
		XWPFParagraph tmpParagraph = document.createParagraph();
		XWPFRun tmpRun = tmpParagraph.createRun();
		tmpRun.setBold(true);
		tmpRun.setText(setDescription, 0);
		tmpRun.addBreak();
		tmpRun = tmpParagraph.createRun();
		tmpRun.setText(set.toString());
	}
}