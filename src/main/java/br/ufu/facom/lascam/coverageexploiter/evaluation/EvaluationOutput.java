package br.ufu.facom.lascam.coverageexploiter.evaluation;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.apache.poi.ss.usermodel.Cell;

/**
 * EvaluationOutput.java is responsible for creating an Excel spreadsheet,
 * called "Parser-binder-evaluation.xls", containing numbers obtained by test
 * cases execution for precision and recall analysis about the parser and the
 * binder.
 * 
 * Created by Fer Madeiral on 21/11/2014.
 */
@SuppressWarnings("deprecation")
public class EvaluationOutput {

	private static EvaluationOutput INSTANCE;

	private String fileName;
	private HSSFWorkbook workbook;
	private HSSFSheet sheet;
	
	private HSSFFont boldFont;
	private HSSFCellStyle centerAlignmentCellStyle, leftAlignmentCellStyle;
	private HSSFCellStyle percentageFormatCellStyle;
	
	private int dataInitialRow, dataFinalRow;

	public static synchronized EvaluationOutput getInstance() {
		if (INSTANCE == null) {
			INSTANCE = new EvaluationOutput();
		}
		return INSTANCE;
	}

	private EvaluationOutput() {
		fileName = "Parser-binder-evaluation.xls";
		workbook = new HSSFWorkbook();
		sheet = workbook.createSheet("All Data");
		
		boldFont = workbook.createFont();
		boldFont.setFontName(HSSFFont.FONT_ARIAL);
		boldFont.setFontHeightInPoints((short) 10);
		boldFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
		
		centerAlignmentCellStyle = workbook.createCellStyle();
		centerAlignmentCellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		
		leftAlignmentCellStyle = workbook.createCellStyle();
		leftAlignmentCellStyle.setAlignment(HSSFCellStyle.ALIGN_LEFT);
		
		percentageFormatCellStyle = workbook.createCellStyle();
		percentageFormatCellStyle.setDataFormat(workbook.createDataFormat().getFormat("0.00%"));
	}

	public void writeDataSheet(List<TestCase> testSuite) {
		createHeader();

		dataInitialRow = 3;
		int rowIndex = dataInitialRow - 1;
		for (TestCase testCase : testSuite) {
			writeDataRow(testCase, rowIndex);
			rowIndex++;
		}
		dataFinalRow = rowIndex;
		
		createDescriptiveStatistics();
		
		createPercentages();

		autoSizeColumns();

		FileOutputStream fileOut;
		try {
			fileOut = new FileOutputStream(fileName);
			workbook.write(fileOut);
			fileOut.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createHeader() {
		centerAlignmentCellStyle.setFont(boldFont);
		
		HSSFRow row;
		HSSFCell cell;
		
		row = sheet.createRow(0);
		
		cell = row.createCell(1);
		cell.setCellValue("Parser");
		cell.setCellStyle(centerAlignmentCellStyle);
		sheet.addMergedRegion(new CellRangeAddress(0, 0, 1, 6));
		
		cell = row.createCell(8);
		cell.setCellValue("Parser to Binder");
		cell.setCellStyle(centerAlignmentCellStyle);
		sheet.addMergedRegion(new CellRangeAddress(0, 0, 8, 13));
		
		cell = row.createCell(15);
		cell.setCellValue("Binder");
		cell.setCellStyle(centerAlignmentCellStyle);
		sheet.addMergedRegion(new CellRangeAddress(0, 0, 15, 20));

		row = sheet.createRow(1);

		writeColumnLabel(row, 0, "Snippet");
		writeColumnLabel(row, 1, "|Relevant|");
		writeColumnLabel(row, 2, "|Returned|");
		writeColumnLabel(row, 3, "|Returned relevant|");
		writeColumnLabel(row, 4, "Precision");
		writeColumnLabel(row, 5, "Recall");
		writeColumnLabel(row, 6, "F-measure");
		writeColumnLabel(row, 8, "|Relevant|");
		writeColumnLabel(row, 9, "|Submitted|");
		writeColumnLabel(row, 10, "|Submitted relevant|");
		writeColumnLabel(row, 11, "Precision");
		writeColumnLabel(row, 12, "Recall");
		writeColumnLabel(row, 13, "F-measure");
		writeColumnLabel(row, 15, "|Bindable|");
		writeColumnLabel(row, 16, "|Returned|");
		writeColumnLabel(row, 17, "|Returned relevant|");
		writeColumnLabel(row, 18, "Precision");
		writeColumnLabel(row, 19, "Recall");
		writeColumnLabel(row, 20, "F-measure");
	}
	
	private void writeColumnLabel(HSSFRow row, int column, String label) {
		HSSFCell cell;
		
		cell = row.createCell(column);
		cell.setCellValue(label);
		cell.setCellStyle(centerAlignmentCellStyle);
	}

	private void writeDataRow(TestCase testCase, int rowIndex) {
		HSSFRow row;
		HSSFCell cell;
		String formula;

		row = sheet.createRow(rowIndex);

		cell = row.createCell(0);
		cell.setCellValue(rowIndex - 1);
		cell.setCellType(Cell.CELL_TYPE_NUMERIC);

		cell = row.createCell(1);
		cell.setCellValue(testCase.getParserRelevantElementsSet().size());
		cell.setCellType(Cell.CELL_TYPE_NUMERIC);

		cell = row.createCell(2);
		cell.setCellValue(testCase.getParserReturnedElementsSet().size());
		cell.setCellType(Cell.CELL_TYPE_NUMERIC);

		cell = row.createCell(3);
		cell.setCellValue(testCase.getParserResultingElements()
				.getTruePositives().size());
		cell.setCellType(Cell.CELL_TYPE_NUMERIC);

		cell = row.createCell(4);
		formula = "IF(ISERROR(D" + (rowIndex + 1) + "/C" + (rowIndex + 1) + "),\"\",D" + (rowIndex + 1) + "/C" + (rowIndex + 1) + ")";
		cell.setCellFormula(formula);
		cell.setCellType(Cell.CELL_TYPE_FORMULA);

		cell = row.createCell(5);
		formula = "IF(ISERROR(D" + (rowIndex + 1) + "/B" + (rowIndex + 1) + "),\"\",D" + (rowIndex + 1) + "/B" + (rowIndex + 1) + ")";
		cell.setCellFormula(formula);
		cell.setCellType(Cell.CELL_TYPE_FORMULA);

		cell = row.createCell(6);
		formula = "IF(ISERROR(2*((E" + (rowIndex + 1) + "*F" + (rowIndex + 1) + ")/(E" + (rowIndex + 1) + "+F" + (rowIndex + 1) + "))),\"\",2*((E" + (rowIndex + 1) + "*F" + (rowIndex + 1) + ")/(E" + (rowIndex + 1) + "+F" + (rowIndex + 1) + ")))";
		cell.setCellFormula(formula);
		cell.setCellType(Cell.CELL_TYPE_FORMULA);

		cell = row.createCell(8);
		cell.setCellValue(testCase.getBinderRelevantElementsSet().size());
		cell.setCellType(Cell.CELL_TYPE_NUMERIC);

		cell = row.createCell(9);
		cell.setCellValue(testCase.getBinderSubmittedElementsSet().size());
		cell.setCellType(Cell.CELL_TYPE_NUMERIC);

		cell = row.createCell(10);
		cell.setCellValue(testCase.getParserToBinderResultingElements()
				.getTruePositives().size());
		cell.setCellType(Cell.CELL_TYPE_NUMERIC);

		cell = row.createCell(11);
		formula = "IF(ISERROR(K" + (rowIndex + 1) + "/J" + (rowIndex + 1) + "),\"\",K" + (rowIndex + 1) + "/J" + (rowIndex + 1) + ")";
		cell.setCellFormula(formula);
		cell.setCellType(Cell.CELL_TYPE_FORMULA);

		cell = row.createCell(12);
		formula = "IF(ISERROR(K" + (rowIndex + 1) + "/I" + (rowIndex + 1) + "),\"\",K" + (rowIndex + 1) + "/I" + (rowIndex + 1) + ")";
		cell.setCellFormula(formula);
		cell.setCellType(Cell.CELL_TYPE_FORMULA);

		cell = row.createCell(13);
		formula = "IF(ISERROR(2*((L" + (rowIndex + 1) + "*M" + (rowIndex + 1) + ")/(L" + (rowIndex + 1) + "+M" + (rowIndex + 1) + "))),\"\",2*((L" + (rowIndex + 1) + "*M" + (rowIndex + 1) + ")/(L" + (rowIndex + 1) + "+M" + (rowIndex + 1) + ")))";
		cell.setCellFormula(formula);
		cell.setCellType(Cell.CELL_TYPE_FORMULA);

		cell = row.createCell(15);
		cell.setCellValue(testCase.getBindableElementsSet().size());
		cell.setCellType(Cell.CELL_TYPE_NUMERIC);

		cell = row.createCell(16);
		cell.setCellValue(testCase.getBinderReturnedElementsSet().size());
		cell.setCellType(Cell.CELL_TYPE_NUMERIC);

		cell = row.createCell(17);
		cell.setCellValue(testCase.getBinderResultingElements()
				.getTruePositives().size());
		cell.setCellType(Cell.CELL_TYPE_NUMERIC);

		cell = row.createCell(18);
		formula = "IF(ISERROR(R" + (rowIndex + 1) + "/Q" + (rowIndex + 1) + "),\"\",R" + (rowIndex + 1) + "/Q" + (rowIndex + 1) + ")";
		cell.setCellFormula(formula);
		cell.setCellType(Cell.CELL_TYPE_FORMULA);

		cell = row.createCell(19);
		formula = "IF(ISERROR(R" + (rowIndex + 1) + "/P" + (rowIndex + 1) + "),\"\",R" + (rowIndex + 1) + "/P" + (rowIndex + 1) + ")";
		cell.setCellFormula(formula);
		cell.setCellType(Cell.CELL_TYPE_FORMULA);

		cell = row.createCell(20);
		formula = "IF(ISERROR(2*((S" + (rowIndex + 1) + "*T" + (rowIndex + 1) + ")/(S" + (rowIndex + 1) + "+T" + (rowIndex + 1) + "))),\"\",2*((S" + (rowIndex + 1) + "*T" + (rowIndex + 1) + ")/(S" + (rowIndex + 1) + "+T" + (rowIndex + 1) + ")))";
		cell.setCellFormula(formula);
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
	}
	
	private void createDescriptiveStatistics() {
		leftAlignmentCellStyle.setFont(boldFont);
		
		HSSFRow row;
		int rowIndex = dataFinalRow;
		
		row = sheet.createRow(rowIndex);
		writeMeasure(row, "Mean:", "AVERAGE", rowIndex);
		
		row = sheet.createRow(++rowIndex);
		writeMeasure(row, "Median:", "MEDIAN", rowIndex);
		
		row = sheet.createRow(++rowIndex);
		writeMeasure(row, "Standard deviation:", "STDEV", rowIndex);
	}
	
	private void writeMeasure(HSSFRow row, String measureName, String measureFormula, int rowIndex) {
		HSSFCell cell;
		
		cell = row.createCell(0);
		cell.setCellValue(measureName);
		cell.setCellStyle(leftAlignmentCellStyle);
		sheet.addMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 0, 1));
		
		cell = row.createCell(4);
		cell.setCellFormula(measureFormula + "(E" + dataInitialRow + ":E" + dataFinalRow + ")");
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
		
		cell = row.createCell(5);
		cell.setCellFormula(measureFormula + "(F" + dataInitialRow + ":F" + dataFinalRow + ")");
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
		
		cell = row.createCell(6);
		cell.setCellFormula(measureFormula + "(G" + dataInitialRow + ":G" + dataFinalRow + ")");
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
		
		cell = row.createCell(11);
		cell.setCellFormula(measureFormula + "(L" + dataInitialRow + ":L" + dataFinalRow + ")");
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
		
		cell = row.createCell(12);
		cell.setCellFormula(measureFormula + "(M" + dataInitialRow + ":M" + dataFinalRow + ")");
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
		
		cell = row.createCell(13);
		cell.setCellFormula(measureFormula + "(N" + dataInitialRow + ":N" + dataFinalRow + ")");
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
		
		cell = row.createCell(18);
		cell.setCellFormula(measureFormula + "(S" + dataInitialRow + ":S" + dataFinalRow + ")");
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
		
		cell = row.createCell(19);
		cell.setCellFormula(measureFormula + "(T" + dataInitialRow + ":T" + dataFinalRow + ")");
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
		
		cell = row.createCell(20);
		cell.setCellFormula(measureFormula + "(U" + dataInitialRow + ":U" + dataFinalRow + ")");
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
	}
	
	private void createPercentages() {
		HSSFRow row;
		HSSFCell cell;
		int rowIndex = dataFinalRow + 4;
		
		row = sheet.createRow(rowIndex);
		
		cell = row.createCell(0);
		cell.setCellFormula("COUNTIF(B" + dataInitialRow + ":B" + dataFinalRow + ",\">0\")/COUNT(B" + dataInitialRow + ":B" + dataFinalRow + ")");
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
		cell.setCellStyle(percentageFormatCellStyle);
		
		cell = row.createCell(1);
		cell.setCellValue("of the snippets have some relevant element for parser");
		sheet.addMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 1, 4));
		
		row = sheet.createRow(++rowIndex);
		
		cell = row.createCell(0);
		cell.setCellFormula("COUNTIF(I" + dataInitialRow + ":I" + dataFinalRow + ",\">0\")/COUNT(I" + dataInitialRow + ":I" + dataFinalRow + ")");
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
		cell.setCellStyle(percentageFormatCellStyle);
		
		cell = row.createCell(1);
		cell.setCellValue("of the snippets have some relevant element for binder");
		sheet.addMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 1, 4));
		
		row = sheet.createRow(++rowIndex);
		
		cell = row.createCell(0);
		cell.setCellFormula("SUM(P" + dataInitialRow + ":P" + dataFinalRow + ")/SUM(K" + dataInitialRow + ":K" + dataFinalRow + ")");
		cell.setCellType(Cell.CELL_TYPE_FORMULA);
		cell.setCellStyle(percentageFormatCellStyle);
		
		cell = row.createCell(1);
		cell.setCellValue("of the submitted relevant elements are bindable");
		sheet.addMergedRegion(new CellRangeAddress(rowIndex, rowIndex, 1, 4));
	}

	private void autoSizeColumns() {
		sheet.autoSizeColumn(0);
		sheet.autoSizeColumn(1);
		sheet.autoSizeColumn(2);
		sheet.autoSizeColumn(3);
		sheet.autoSizeColumn(4);
		sheet.autoSizeColumn(5);
		sheet.autoSizeColumn(6);
		sheet.autoSizeColumn(8);
		sheet.autoSizeColumn(9);
		sheet.autoSizeColumn(10);
		sheet.autoSizeColumn(11);
		sheet.autoSizeColumn(12);
		sheet.autoSizeColumn(13);
		sheet.autoSizeColumn(15);
		sheet.autoSizeColumn(16);
		sheet.autoSizeColumn(17);
		sheet.autoSizeColumn(18);
		sheet.autoSizeColumn(19);
		sheet.autoSizeColumn(20);
	}
}