package br.ufu.facom.lascam.coverageexploiter.evaluation;

import br.ufu.facom.lascam.coverageexploiter.parser.impl.RegexJavaAnalyser;
import br.ufu.facom.lascam.coverageexploiter.parser.model.CitedElements;

/**
 * IdentifiedElements.aj captures the identified elements in snippets by
 * parser/binder in order to send to the instance of TestCase that is running.
 * <p>
 * Created by Fer Madeiral on 21/11/2014.
 */
public aspect IdentifiedElements {

	private TestCase actualTestCase;
	private boolean classPassedByTheBinder, methodPassedByTheBinder;

	pointcut run(TestCase testCase) :
		execution(void br.ufu.facom.lascam.coverageexploiter.evaluation.TestCase.run(RegexJavaAnalyser)) &&
		this(testCase);

	pointcut addPackage(String element) :
		call(void CitedElements.addPackage(String)) &&
		within(br.ufu.facom.lascam.coverageexploiter.parser.impl.RegexJavaAnalyser) && 
		withincode(CitedElements parseSnippet(String)) && 
		cflow(execution(void br.ufu.facom.lascam.coverageexploiter.evaluation.TestCase.run(RegexJavaAnalyser))) &&
		args(element);
	
	pointcut addClass(String element) :
		call(void CitedElements.addClass(String)) &&
		within(br.ufu.facom.lascam.coverageexploiter.parser.impl.RegexJavaAnalyser) && 
		withincode(CitedElements parseSnippet(String)) && 
		cflow(execution(void br.ufu.facom.lascam.coverageexploiter.evaluation.TestCase.run(RegexJavaAnalyser))) &&
		args(element);
	
	pointcut addMethod(String element) :
		call(void CitedElements.addMethod(String)) &&
		within(br.ufu.facom.lascam.coverageexploiter.parser.impl.RegexJavaAnalyser) && 
		withincode(CitedElements parseSnippet(String)) && 
		cflow(execution(void br.ufu.facom.lascam.coverageexploiter.evaluation.TestCase.run(RegexJavaAnalyser))) &&
		args(element);
	
	pointcut bindClass() :
		call(String br.ufu.facom.lascam.coverageexploiter.parser.impl.RegexJavaAnalyser.bindClass(String, String)) &&
		cflow(execution(void br.ufu.facom.lascam.coverageexploiter.evaluation.TestCase.run(RegexJavaAnalyser)));

	pointcut bindMethod() :
		call(String br.ufu.facom.lascam.coverageexploiter.parser.impl.RegexJavaAnalyser.bindMethod(String, String)) &&
		cflow(execution(void br.ufu.facom.lascam.coverageexploiter.evaluation.TestCase.run(RegexJavaAnalyser)));

	before(TestCase testCase) : run(testCase) {
		actualTestCase = testCase;
	}
	
	after(String element) : addPackage(element) {
		actualTestCase.addNormalElement(element);
	}
	
	after(String element) : addClass(element) {
		if (classPassedByTheBinder) {
			if (Character.isLowerCase(element.charAt(0))) {
				String packName = RegexJavaAnalyser.separatePackageName(element);
				String className = element.replace(packName + ".", "");
				actualTestCase.addBoundElement("<" + packName + ">." + className);
			} else {
				actualTestCase.addNotBoundElement("<?>." + element);
			}
			classPassedByTheBinder = false;
		} else {
			actualTestCase.addNormalElement(element);
		}
	}

	after(String element) : addMethod(element) {
		if (methodPassedByTheBinder) {
			if (element.contains(".")) {
				String packName = RegexJavaAnalyser.separatePackageName(element);
				String className = element.substring(0, element.lastIndexOf(".")).replace(packName + ".", "");
				if (!packName.isEmpty()) {
					String methodName = element.replace(packName + "." + className + ".", "");
					actualTestCase.addBoundElement("<" + packName + ">.<" + className + ">." + methodName);
				} else {
					String methodName = element.replace(className + ".", "");
					actualTestCase.addBoundElement("<?>.<" + className + ">." + methodName);
				}
			} else {
				actualTestCase.addNotBoundElement("<?>." + element);
			}
			methodPassedByTheBinder = false;
		} else {
			if (RegexJavaAnalyser.isConstructor(element)) {
				if (Character.isLowerCase(element.charAt(0))) {
					String packName = RegexJavaAnalyser.separatePackageName(element);
					String methodName = element.replace(packName + ".", "");
					actualTestCase.addBoundElement("<" + packName + ">." + methodName);
				} else {
					actualTestCase.addNotBoundElement("<?>." + element);
				}
			} else {
				actualTestCase.addNormalElement(element);
			}
		}
	}

	after() : bindClass() {
		classPassedByTheBinder = true;
	}
	
	after() : bindMethod() {
		methodPassedByTheBinder = true;
	}
}