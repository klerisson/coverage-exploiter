package br.ufu.facom.lascam.coverageexploiter.evaluation;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import net.htmlparser.jericho.Config;
import net.htmlparser.jericho.LoggerProvider;

import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;

import br.ufu.facom.lascam.coverageexploiter.extractor.ApiExtractor;
import br.ufu.facom.lascam.coverageexploiter.extractor.ExtractorFromJavaDoc;
import br.ufu.facom.lascam.coverageexploiter.parser.impl.RegexJavaAnalyser;
import br.ufu.facom.lascam.coverageexploiter.posts.PostsRetriever;
import br.ufu.facom.lascam.coverageexploiter.util.Constants;

/**
 * ParserAndBinderEvaluation.java is the main class to perform test cases in
 * order to evaluate the parser and the binder. The evaluation activity contains
 * four main steps: 1) setting up data used to parse and to bind snippets; 2)
 * creation a test suite (instances of TestCase.java) by reading the
 * "Snippets-for-evaluation (with elements).docx" document (created by
 * SnippetsForEvaluation.java), which contains the input and the expected output
 * data to perform test case; 3) execution of the test cases, where the parser
 * and the binder are exercised, and the output is checked with the expected
 * output (by TestChecker.java) generating numbers (represented by
 * ResultingElements.java) for further precision and recall analysis; and 4)
 * generation of the evaluation process output in two ways -- an Excel
 * spreadsheet containing the numbers for precision and recall analysis about
 * the parser and the binder (generated by EvaluationOutput.java), and a
 * detailed report containing, for each evaluated snippet, the elements recorded
 * on the Excel spreadsheet (generated by DetailedEvaluationReport.java).
 * <p>
 * Created by Fer Madeiral on 20/11/2014.
 */
public class ParserAndBinderEvaluation {

	private List<TestCase> testSuite;
	private RegexJavaAnalyser regexAnalyser;

	public static void main(String[] args) {
		System.out.println(new Date() + " Begin evaluation...");
		ParserAndBinderEvaluation test = new ParserAndBinderEvaluation();

		System.out.println(new Date() + " Setting up data");
		test.setUp();

		System.out.println(new Date() + " Creating test cases");
		test.createTestCases();

		System.out.println(new Date() + " Running test cases");
		test.runTestCases();

		System.out.println(new Date() + " Generating output");
		test.tearDown();

		System.out.println(new Date() + " End.");
	}

	private void setUp() {
		Config.LoggerProvider = LoggerProvider.DISABLED;
		try {
			PostsRetriever postsRetriever = new PostsRetriever();
			postsRetriever.fetchPosts();
			postsRetriever.parseBodies();

			ApiExtractor extractor = new ExtractorFromJavaDoc(Constants.JAVADOC_PATH, "javax.swing");
			extractor.extract();

			regexAnalyser = new RegexJavaAnalyser();
		} catch (Exception e) {
			System.out.println("Evaluation fail!");
			e.printStackTrace();
		}
	}

	private void createTestCases() {
		testSuite = new ArrayList<TestCase>();

		FileInputStream in;
		try {
			in = new FileInputStream(new File("Snippets-for-evaluation (with elements).docx"));
			XWPFDocument document = new XWPFDocument(in);

			TestCase testCase;
			String snippet, elements;
			List<XWPFParagraph> codeParagraph;
			int index = 0;
			Iterator<XWPFParagraph> ite = document.getParagraphsIterator();
			while (ite.hasNext()) {
				ite.next(); // Skip paragraph "Snippet x"
				ite.next(); // Skip tag <snippet>
				snippet = "";
				codeParagraph = new ArrayList<XWPFParagraph>();
				for (XWPFParagraph aux = ite.next(); ite.hasNext() && !aux.getParagraphText().equals("</snippet>"); aux = ite.next()) {
					codeParagraph.add(codeParagraph.size(), aux);
					snippet += aux.getParagraphText();
				}
				ite.next(); // Skip tag <elements>
				elements = ite.next().getParagraphText();
				ite.next(); // Skip tag </elements>
				testCase = new TestCase(snippet, elements);
				testCase.setCodeParagraph(codeParagraph);
				testSuite.add(index++, testCase);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void runTestCases() {
		for (TestCase testCase : testSuite) {
			testCase.run(regexAnalyser);
		}
	}

	private void tearDown() {
		EvaluationOutput.getInstance().writeDataSheet(testSuite);
		DetailedEvaluationReport.getInstance().writeDocument(testSuite);
	}
}