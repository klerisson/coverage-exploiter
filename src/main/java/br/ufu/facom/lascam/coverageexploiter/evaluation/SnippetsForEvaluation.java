package br.ufu.facom.lascam.coverageexploiter.evaluation;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.xwpf.usermodel.BreakType;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;

/**
 * SnippetsForEvaluation.java is responsible for creating a word document,
 * called "Snippets-for-evaluation.docx", containing snippets to evaluate the
 * parser and the binder. These snippets are captured by
 * CaptureParsedSnippets.aj after being parsed. The API elements contained in
 * the snippets must be inserted manually in the document.
 * <p>
 * Created by Fer Madeiral on 16/11/2014.
 */
public class SnippetsForEvaluation {

	private static SnippetsForEvaluation INSTANCE;

	private String fileName;
	private XWPFDocument document;
	private List<String> content;

	public static synchronized SnippetsForEvaluation getInstance() {
		if (INSTANCE == null) {
			INSTANCE = new SnippetsForEvaluation();
		}
		return INSTANCE;
	}

	public SnippetsForEvaluation() {
		fileName = "Snippets-for-evaluation.docx";
		document = new XWPFDocument();
		content = new ArrayList<String>();
	}

	public void add(String block) {
		if (content.size() < 100)
			content.add(block);
	}

	public void writeDocument() {
		XWPFParagraph tmpParagraph;
		XWPFRun tmpRun;
		String text;
		for (int i = 0; i < content.size(); i++) {
			text = content.get(i);

			tmpParagraph = document.createParagraph();
			tmpRun = tmpParagraph.createRun();
			tmpRun.setBold(true);
			tmpRun.setColor("FF0000");
			tmpRun.setText("Snippet " + (i + 1));

			tmpParagraph = document.createParagraph();
			tmpRun = tmpParagraph.createRun();
			tmpRun.setText("<snippet>");
			tmpParagraph = document.createParagraph();
			tmpRun = tmpParagraph.createRun();
			if (text.contains("\n")) {
				String[] lines = text.split("\n");
				tmpRun.setText(lines[0], 0);
				for (int j = 1; j < lines.length; j++) {
					tmpRun.addBreak();
					tmpRun.setText(lines[j]);
				}
			} else {
				tmpRun.setText(text);
			}
			tmpParagraph = document.createParagraph();
			tmpRun = tmpParagraph.createRun();
			tmpRun.setText("</snippet>");

			tmpParagraph = document.createParagraph();
			tmpRun = tmpParagraph.createRun();
			tmpRun.setText("<elements>");
			tmpParagraph = document.createParagraph();
			tmpRun = tmpParagraph.createRun();
			tmpRun.setText("");
			tmpParagraph = document.createParagraph();
			tmpRun = tmpParagraph.createRun();
			tmpRun.setText("</elements>");

			if ((i + 1) < content.size()) {
				tmpRun.addBreak(BreakType.PAGE);
			}
		}

		FileOutputStream fos;
		try {
			fos = new FileOutputStream(new File(fileName));
			document.write(fos);
			fos.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}