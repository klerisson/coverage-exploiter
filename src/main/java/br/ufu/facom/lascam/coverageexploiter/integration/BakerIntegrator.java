package br.ufu.facom.lascam.coverageexploiter.integration;

import br.ufu.facom.lascam.coverageexploiter.integration.model.ApiElement;
import br.ufu.facom.lascam.coverageexploiter.integration.model.ApiElements;
import br.ufu.facom.lascam.coverageexploiter.integration.model.Element;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import java.io.IOException;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashSet;

/**
 * Created by Klerisson on 06/10/2014.
 */
public class BakerIntegrator {

    private static final String BAKER_URL = "http://gadget.cs.uwaterloo.ca:2145/snippet/getapijsonfromcode.php";

    private ApiElements apiElements;

    public ApiElements parseSnippet(String statement) throws IOException {

            try(CloseableHttpClient httpClient = HttpClients.createDefault()) {
                HttpPost httppost = new HttpPost(BAKER_URL);

                StringEntity snippet = new StringEntity("pastedcode=" + statement,
                        ContentType.create("application/x-www-form-urlencoded; charset=UTF-8"));

                httppost.setEntity(snippet);
                // Create a custom response handler
                ResponseHandler<String> responseHandler;
                responseHandler = new ResponseHandler<String>() {
                    @Override
                    public String handleResponse(HttpResponse response) throws ClientProtocolException, IOException {
                            int status = response.getStatusLine().getStatusCode();
                            if (status >= 200 && status < 300) {
                                HttpEntity entity = response.getEntity();
                                return entity != null ? EntityUtils.toString(entity) : null;
                            } else {
                                throw new ClientProtocolException("Unexpected response status: " + status);
                            }
                    }
                };

                String responseBody = httpClient.execute(httppost, responseHandler);
                //Handle malformed json
                responseBody = responseBody.replace("\"\"", "\"").trim();
                if (responseBody.endsWith("}}")){
                    responseBody = responseBody.replace("}}","}]}");
                    responseBody = responseBody.replace("\"api_elements\": {","\"api_elements\": [{");
                }

                Gson gson = new GsonBuilder().create();
                this.apiElements = gson.fromJson(responseBody, ApiElements.class);
                return this.apiElements;

        } catch (Exception e) {
            throw e;
        }
    }

    public HashSet<String> getAllElements(){
        HashSet<String> result = new LinkedHashSet<>();
        if(this.apiElements != null) {
            for (ApiElement apiElement : this.apiElements.getApiElements()) {
                for (String element : apiElement.getElements()) {
                    result.add(element);
                }
            }
        }
        return result;
    }

//    public static void main(String ... args) throws IOException {
//        System.out.println(parseSnippet("File file = new File(); String url = x; HttpClient httpClient = new DefaultHttpClient();"));
//    }
}
